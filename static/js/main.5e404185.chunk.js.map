{"version":3,"sources":["components/header.js","components/main.js","components/workdata.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Main","final","this","props","item","completed","textDecoration","color","fontStyle","type","checked","onChange","handelClick","id","style","work","React","Component","WorkData","MyApp","state","todo","another","bind","addNew","handlechange","clear","setState","PrevState","map","event","string","target","value","add","length","toUpperCase","push","i","pop","workcomponets","helo","key","placeholder","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNASeA,MARf,WAEA,OACA,6BACA,4BAAQC,UAAU,UAHL,4BCiBEC,E,iLAfV,IAAD,OAMAC,EAAQC,KAAKC,MAAMC,KAAKC,UALF,CACdC,eAAgB,eAChBC,MAAM,UACNC,UAAU,UAE+B,KACrD,OACA,yBAAKT,UAAU,aACf,2BAAOU,KAAK,WAAaC,QAASR,KAAKC,MAAMC,KAAKC,UAClDM,SAAU,kBAAK,EAAKR,MAAMS,YAAY,EAAKT,MAAMC,KAAKS,OACtD,uBAAGC,MAAOb,GAAQC,KAAKC,MAAMC,KAAKW,W,GAdfC,IAAMC,WCCVC,EAFA,GCsFAC,E,YAhFb,aACC,IAAD,8BACE,+CACGC,MAAQ,CACbC,KAAKH,EACLI,QAAQ,IAEV,EAAKV,YAAY,EAAKA,YAAYW,KAAjB,gBACjB,EAAKC,OAAO,EAAKA,OAAOD,KAAZ,gBACZ,EAAKE,aAAa,EAAKA,aAAaF,KAAlB,gBAClB,EAAKG,MAAM,EAAKA,MAAMH,KAAX,gBATT,E,yEAWUV,GAEZX,KAAKyB,UAAS,SAACC,GAQf,MAAM,CACJP,KARmBO,EAAUP,KAAKQ,KAAI,SAACR,GAKzC,OAJKA,EAAKR,KAAKA,IAEbQ,EAAKhB,WAAYgB,EAAKhB,WAEjBgB,W,mCAOMS,GAEX,IAAMC,EAASD,EAAME,OAAOC,MAC5B/B,KAAKyB,SAAS,CAChBL,QAAQS,M,+BAMN,IAAMG,EAAK,CACTrB,GAAGK,EAASiB,OAAO,EACnBpB,KAAKb,KAAKkB,MAAME,QAAQc,cACxB/B,WAAU,GAEZa,EAASmB,KAAKH,GACdhC,KAAKyB,SAAS,CACZN,KAAKH,M,8BAMP,IAAI,IAAIoB,EAAEpB,EAASiB,OAAOG,EAAE,IAAIA,EAE9BpB,EAASqB,MAEZrC,KAAKyB,SAAS,CACZN,KAAKH,M,+BAIP,IAAD,OACQsB,EAAgBtC,KAAKkB,MAAMC,KAAKQ,KAAI,SAACY,GAAD,OAC5C,kBAAC,EAAD,CAAMC,IAAKD,EAAK5B,GAAIT,KAAMqC,EAAM7B,YAAa,EAAKA,iBAClD,OACI,6BACA,kBAAC,EAAD,MACA,yBAAKb,UAAU,aACbyC,GAED,yBAAKzC,UAAU,OAEf,2BAAOU,KAAK,OAAOV,UAAU,KAAK4C,YAAY,eAAehC,SAAUT,KAAKuB,eAC3E,4BAAQmB,QAAS1C,KAAKsB,OAAQf,KAAK,UAAnC,iBAGA,yBAAKV,UAAU,SACb,4BAAQ6C,QAAS1C,KAAKwB,OAAtB,mB,GA7EYV,IAAMC,WCQN4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5e404185.chunk.js","sourcesContent":["import React from 'react'\r\nfunction Header () {\r\nconst todo = \"TODO LIST ðŸ˜­\";\r\nreturn(\r\n<div>\r\n<header className=\"navbar\">{todo}</header>\r\n</div>\r\n)\r\n}\r\nexport default Header ;","import React from'react'\r\nclass Main extends React.Component\r\n{\r\nrender()\r\n    {\r\n    const completedStyle= {\r\n            textDecoration: \"line-through\",\r\n            color:\"#cdcdcd\",\r\n            fontStyle:\"italic\"    \r\n            }\r\nlet final=  this.props.item.completed?completedStyle:null\r\nreturn(\r\n<div className=\"todo-item\">\r\n<input type=\"checkbox\"   checked={this.props.item.completed} \r\nonChange={()=> this.props.handelClick(this.props.item.id)}/>\r\n<p style={final}>{this.props.item.work}</p>\r\n</div>\r\n)}\r\n}\r\nexport default Main","const WorkData=[\r\n]\r\nexport default WorkData","import React from 'react';\nimport Header from './components/header'\nimport Main from './components//main'\nimport WorkData from './components/workdata'\nclass MyApp extends React.Component \n{\n  constructor()\n  {\n    super()\n  this.state = {\n  todo:WorkData,\n  another:\"\"\n}\nthis.handelClick=this.handelClick.bind(this)\nthis.addNew=this.addNew.bind(this)\nthis.handlechange=this.handlechange.bind(this)\nthis.clear=this.clear.bind(this)\n}\nhandelClick(id)\n{\nthis.setState((PrevState)=>\n{const updatedtodo = PrevState.todo.map((todo)=>{\n  if(todo.id===id)\n{\n  todo.completed= !todo.completed\n}\nreturn todo\n})   \nreturn{\n  todo:updatedtodo\n}\n})\n}\nhandlechange(event)\n{\n  const string = event.target.value\n  this.setState({\nanother:string\n  })\n \n}\naddNew()\n{\n  const add ={\n    id:WorkData.length+1,\n    work:this.state.another.toUpperCase(),\n    completed:false\n  } \n  WorkData.push(add)\n  this.setState({\n    todo:WorkData\n  }\n  )\n}\nclear()\n{ \n  for(let i=WorkData.length;i>0;--i)\n  {\n    WorkData.pop()\n  }\n this.setState({\n   todo:WorkData\n  })  \n}\nrender()\n{\n  const workcomponets = this.state.todo.map((helo)=>\n<Main key={helo.id} item={helo} handelClick={this.handelClick}/>)\nreturn(\n    <div>     \n    <Header/>\n    <div className=\"todo-list\">\n     {workcomponets}\n      </div>\n     <div className=\"add\"> \n \n     <input type=\"text\" className=\"tb\" placeholder=\"add new item\" onChange={this.handlechange}/>\n      <button onClick={this.addNew} type=\"submit\">ADD NEW ITEM</button>\n     \n       </div>\n      <div className=\"clear\">\n        <button onClick={this.clear}>CLEAR ALL</button>\n        </div>\n    </div>\n)}\n}\nexport default MyApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MyApp from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MyApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}